import { injectable } from 'inversify';

import {
  {{pascalCase screenName}}ScreenProps,
  {{pascalCase screenName}}ScreenViewModel,
} from './{{dashCase screenName}}-screen.types';

import { {{pascalCase screenName}}Model, Get{{pascalCase screenName}}UseCase } from '#features/{{dashCase name}}/domain';

@injectable()
export class {{pascalCase screenName}}ScreenViewModelImpl implements {{pascalCase screenName}}ScreenViewModel {
  private props?: {{pascalCase screenName}}ScreenProps;
  private text = '';
  private isLoading = false;
  private hasError = false;

  constructor(private readonly get{{pascalCase screenName}}UseCase: Get{{pascalCase screenName}}UseCase) {}

  public init() {
    this.get{{pascalCase screenName}}();
  }

  public update(props: {{pascalCase screenName}}ScreenProps) {
    this.props = props;
  }

  public dispose() {}

  public get viewActions() {
    return {
      finish: this.props?.onFinished,
    };
  }

  public get viewState() {
    return {
      text: this.text,
      isLoading: this.isLoading,
      hasError: this.hasError,
    };
  }

  private async get{{pascalCase screenName}}() {
    this.isLoading = true;
    this.hasError = false;

    const result = await this.get{{pascalCase screenName}}UseCase.execute();
    result.fold(this.handleGet{{pascalCase screenName}}Error, this.handleGet{{pascalCase screenName}}Success);
  }

  private handleGet{{pascalCase screenName}}Success = (data: {{pascalCase screenName}}Model) => {
    this.text = data.text;
    this.isLoading = false;
  };

  private handleGet{{pascalCase screenName}}Error = () => {
    this.hasError = true;
    this.isLoading = false;
  };
}
