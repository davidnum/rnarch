import { mock } from 'jest-mock-extended';
import { Either } from 'monet';

import { {{pascalCase name}}RemoteDataSource } from '#features/{{dashCase name}}/data/data-sources';
import { HttpClient, HttpFailure } from '#infrastructure/http';

describe('{{pascalCase name}}RemoteDataSource', () => {
  it('should return an {{dashCase name}} if succeed', async () => {
    // arrange
    const httpClient = mock<HttpClient>();
    httpClient.get.mockResolvedValue(
      Either.right({ data: { text: '{{dashCase name}}' } }),
    );
    const dataSource = new {{pascalCase name}}RemoteDataSource(httpClient);

    // act
    const result = await dataSource.get{{pascalCase name}}();

    // assert
    expect(result.right()).toEqual({ text: '{{dashCase name}}' });
  });

  it('should return a failure if failed', async () => {
    // arrange
    const httpClient = mock<HttpClient>();
    httpClient.get.mockResolvedValue(Either.left(new HttpFailure('error')));
    const dataSource = new {{pascalCase name}}RemoteDataSource(httpClient);

    // act
    const result = await dataSource.get{{pascalCase name}}();

    // assert
    expect(result.left()).toBeInstanceOf(HttpFailure);
  });
});
